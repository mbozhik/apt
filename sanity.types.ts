/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Collection = {
  _id: string;
  _type: "collection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  tires?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tire";
  }>;
};

export type Tire = {
  _id: string;
  _type: "tire";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  naming: string;
  slug: Slug;
  token: Slug;
  description: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  decoding: string;
  descriptors?: Array<string>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Collection | Tire | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/requests.ts
// Variable: TIRE_QUERY
// Query: *[_type == "tire"]{        naming, slug, token, id, description, image, decoding, descriptors,    }
export type TIRE_QUERYResult = Array<{
  naming: string;
  slug: Slug;
  token: Slug;
  id: null;
  description: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  decoding: string;
  descriptors: Array<string> | null;
}>;
// Variable: TIRE_ITEM_QUERY
// Query: *[_type == "tire" && slug.current == $slug][0]{        naming, slug, token, id, description, image, decoding, descriptors,    }
export type TIRE_ITEM_QUERYResult = {
  naming: string;
  slug: Slug;
  token: Slug;
  id: null;
  description: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  decoding: string;
  descriptors: Array<string> | null;
} | null;
// Variable: COLLECTION_QUERY
// Query: *[_type == "collection"]{        title, slug, tires[] -> {naming, slug, token, id, description, image, decoding, descriptors},    }
export type COLLECTION_QUERYResult = Array<{
  title: string;
  slug: Slug;
  tires: Array<{
    naming: string;
    slug: Slug;
    token: Slug;
    id: null;
    description: string;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    decoding: string;
    descriptors: Array<string> | null;
  }> | null;
}>;
// Variable: COLLECTION_ITEM_QUERY
// Query: *[_type == "collection" && slug.current == $slug][0]{      title, slug, tires[] -> {naming, slug, token, id, description, image, decoding, descriptors},  }
export type COLLECTION_ITEM_QUERYResult = {
  title: string;
  slug: Slug;
  tires: Array<{
    naming: string;
    slug: Slug;
    token: Slug;
    id: null;
    description: string;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    decoding: string;
    descriptors: Array<string> | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"tire\"]{\n        naming, slug, token, id, description, image, decoding, descriptors,\n    }": TIRE_QUERYResult;
    "\n    *[_type == \"tire\" && slug.current == $slug][0]{\n        naming, slug, token, id, description, image, decoding, descriptors,\n    }": TIRE_ITEM_QUERYResult;
    "\n    *[_type == \"collection\"]{\n        title, slug, tires[] -> {naming, slug, token, id, description, image, decoding, descriptors},\n    }": COLLECTION_QUERYResult;
    "\n  *[_type == \"collection\" && slug.current == $slug][0]{\n      title, slug, tires[] -> {naming, slug, token, id, description, image, decoding, descriptors},\n  }": COLLECTION_ITEM_QUERYResult;
  }
}
